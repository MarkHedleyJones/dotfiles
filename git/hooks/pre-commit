#!/bin/bash

# Final pre-commit hook with tool checks and dual Python handling

# No colors - they show up as garbage in some terminals

# Check if required tools are installed
check_tools() {
    local missing_tools=()

    # Check Python formatter
    if ! command -v ruff &> /dev/null; then
        missing_tools+=("ruff")
    fi

    # Check C/C++ formatter
    if ! command -v clang-format-18 &> /dev/null && ! command -v clang-format &> /dev/null; then
        missing_tools+=("clang-format")
    fi

    # Check web formatter
    if ! command -v prettier &> /dev/null; then
        missing_tools+=("prettier")
    fi

    # Check shell formatter
    if ! command -v shfmt &> /dev/null; then
        missing_tools+=("shfmt")
    fi

    # If tools are missing, show warnings but continue
    if [ ${#missing_tools[@]} -gt 0 ]; then
        # Get repository name for notification
        REPO_NAME=$(basename "$(git rev-parse --show-toplevel 2>/dev/null)" 2>/dev/null || echo "repository")

        # Send desktop notification if notify-send is available
        if command -v notify-send &> /dev/null; then
            notify-send --urgency=critical \
                "Git Hook: Missing Formatters" \
                "Repository '$REPO_NAME' - Check git commit console for details"
        fi

        echo "Warning: Some formatting tools are not installed:"
        for tool in "${missing_tools[@]}"; do
            case $tool in
                ruff)
                    echo "  $tool - Install with: pip install --user --break-system-packages ruff"
                    ;;
                prettier)
                    echo "  $tool - Install with: npm install -g prettier"
                    ;;
                clang-format)
                    echo "  $tool - Install with: sudo apt install clang-format"
                    ;;
                shfmt)
                    echo "  $tool - Install with: sudo apt install shfmt"
                    ;;
            esac
        done
        echo "Files requiring these tools will be skipped."
        echo ""
    fi
}

# Run tool check
check_tools

echo "Formatting staged files..."

staged_files=$(git diff --cached --name-only --diff-filter=ACM)
formatted_count=0

# Use clang-format-18 if available, otherwise fallback to clang-format
CLANG_FORMAT="clang-format"
if command -v clang-format-18 &> /dev/null; then
    CLANG_FORMAT="clang-format-18"
fi

for file in $staged_files; do
    [ ! -f "$file" ] && continue

    ext="${file##*.}"
    original_hash=$(sha256sum "$file" | cut -d' ' -f1)

    case "$ext" in
        # Python: Ruff (replaces Black + isort)
        py)
            ruff format "$file" 2>/dev/null
            ruff check --fix "$file" 2>/dev/null
            ;;

        # C/C++: clang-format
        c|cpp|cc|cxx|h|hpp)
            $CLANG_FORMAT -i "$file" 2>/dev/null
            ;;

        # Everything web: Prettier
        js|jsx|ts|tsx|json|jsonc|yml|yaml|md|html|css|scss|vue)
            prettier --write "$file" 2>/dev/null
            ;;

        # Shell scripts: shfmt
        sh|bash)
            shfmt -w "$file" 2>/dev/null
            ;;

        # Other text files: basic cleanup
        *)
            if file "$file" | grep -q "text"; then
                sed -i 's/[[:space:]]*$//' "$file"
                [ -n "$(tail -c 1 "$file")" ] && echo >> "$file"
            fi
            ;;
    esac

    # Re-stage if changed
    new_hash=$(sha256sum "$file" | cut -d' ' -f1)
    if [ "$original_hash" != "$new_hash" ]; then
        echo "  ✓ $file"
        git add "$file"
        ((formatted_count++))
    fi
done

if [ $formatted_count -gt 0 ]; then
    echo "✓ Formatted $formatted_count file(s)"
else
    echo "No files needed formatting"
fi

exit 0
