#!/bin/bash
# Use environment variable to track the terminal's workspace

# If TERMINAL_WORKSPACE is already set (by bashrc), use it
if [ -n "$TERMINAL_WORKSPACE" ]; then
    WORKSPACE="$TERMINAL_WORKSPACE"
else
    # Try to determine workspace from current focus as fallback
    FOCUSED_WINDOW=$(xdotool getwindowfocus 2>/dev/null)
    
    if [ -n "$FOCUSED_WINDOW" ] && [ "$FOCUSED_WINDOW" != "1" ]; then
        WORKSPACE=$(i3-msg -t get_tree 2>/dev/null | python3 -c "
import sys, json
try:
    tree = json.load(sys.stdin)
    target = $FOCUSED_WINDOW
    def search(node, ws=None):
        if node.get('type') == 'workspace':
            ws = node.get('name')
        if node.get('window') == target:
            return ws
        for child in node.get('nodes', []) + node.get('floating_nodes', []):
            result = search(child, ws)
            if result: return result
        return None
    print(search(tree) or '')
except: print('')
" 2>/dev/null)
    fi
    
    if [ -z "$WORKSPACE" ]; then
        WORKSPACE=$(i3-msg -t get_workspaces 2>/dev/null | jq -r '.[] | select(.focused == true) | .name' 2>/dev/null)
        WORKSPACE="$WORKSPACE (current)"
    fi
fi

# Send notification
if [ $# -gt 0 ]; then
    # Send the notification
    notify-send "Desktop $WORKSPACE" "$*"
    
    # Set urgent hint using the stored terminal window ID
    if [ -n "$TERMINAL_WINDOW_ID" ]; then
        # Use the window ID that was captured when this terminal started
        wmctrl -i -r "$TERMINAL_WINDOW_ID" -b add,demands_attention 2>/dev/null
    else
        # Fallback: try to get and set the current active window as urgent
        WINDOW_ID=$(xdotool getactivewindow 2>/dev/null)
        if [ -n "$WINDOW_ID" ]; then
            wmctrl -i -r "$WINDOW_ID" -b add,demands_attention 2>/dev/null
        fi
    fi
else
    echo "Using workspace: $WORKSPACE"
    echo "TERMINAL_WORKSPACE env: $TERMINAL_WORKSPACE"
fi