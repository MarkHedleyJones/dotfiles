#!/bin/bash
#
# Update workspace status based on TERMINAL_WORKSPACE environment variable
# Usage: claude-workspace-status [ready|busy|clear]
#
# This script is designed to be called from Claude Code hooks to update
# the workspace status that the i3-voyager-rgb script uses for LED colors.
# States: claude-ready, claude-busy, or clear (to remove Claude state)

# Exit if TERMINAL_WORKSPACE is not set
if [ -z "$TERMINAL_WORKSPACE" ]; then
    exit 0
fi

# Handle status mapping
# Map "ready" to "claude-ready", "busy" to "claude-busy"
# "clear" or empty string will restore to occupied/idle based on windows
if [ $# -eq 1 ]; then
    case "$1" in
        ready) STATUS="claude-ready" ;;
        busy) STATUS="claude-busy" ;;
        clear|"")
            # We'll clear Claude status and let i3-voyager-rgb determine occupied/idle
            STATUS=""
            ;;
        *) STATUS="$1" ;;  # Pass through unknown states
    esac
else
    STATUS="claude-ready"  # Default to ready
fi

# Ensure the directory exists
mkdir -p ~/.config/i3

# Status file location
STATUS_FILE=~/.config/i3/workspace-status.json

# Create the status file with all 10 workspaces if it doesn't exist
# Use "empty" as the default state
if [ ! -f "$STATUS_FILE" ]; then
    echo '{
  "1": "empty",
  "2": "empty",
  "3": "empty",
  "4": "empty",
  "5": "empty",
  "6": "empty",
  "7": "empty",
  "8": "empty",
  "9": "empty",
  "10": "empty"
}' > "$STATUS_FILE"
fi

# Update the status for the current workspace
# Using a temp file to avoid corruption if interrupted
# Also ensures all 10 workspaces exist and sorts by key
TEMP_FILE="/tmp/claude-status-$$"

# If STATUS is empty, we need to determine if workspace should be occupied or empty
if [ -z "$STATUS" ]; then
    # Read current state to preserve occupied/empty
    CURRENT_STATE=$(jq -r --arg ws "$TERMINAL_WORKSPACE" '.[$ws]' "$STATUS_FILE")
    # If it was a claude state, change to occupied (assuming windows exist)
    # i3-voyager-rgb will correct this to empty if no windows
    if [[ "$CURRENT_STATE" == claude-* ]]; then
        STATUS="occupied"
    else
        # Keep current non-claude state
        STATUS="$CURRENT_STATE"
    fi
fi

jq --arg ws "$TERMINAL_WORKSPACE" --arg status "$STATUS" '
  # Ensure all 10 workspaces exist with empty as default
  . as $current |
  (["1","2","3","4","5","6","7","8","9","10"] | 
   map({key: ., value: ($current[.] // "empty")}) | 
   from_entries) |
  # Update the current workspace
  .[$ws] = $status |
  # Sort by numeric key
  to_entries | sort_by(.key | tonumber) | from_entries
' "$STATUS_FILE" > "$TEMP_FILE" && mv "$TEMP_FILE" "$STATUS_FILE"

# Return success/failure based on the operation
if [ $? -eq 0 ]; then
    exit 0
else
    exit 1
fi